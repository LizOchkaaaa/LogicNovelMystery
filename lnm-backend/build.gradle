plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.2.10'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
}

group = 'ru.itmo.logic-novel-mystery'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('sentryVersion', "7.14.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-integration'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.sentry:sentry-spring-boot-starter-jakarta'
    implementation 'org.springframework.integration:spring-integration-http'
    implementation 'org.springframework.integration:spring-integration-jpa'
    implementation 'org.springframework.integration:spring-integration-mail'
    implementation 'org.springframework.integration:spring-integration-security'
    testImplementation 'org.projectlombok:lombok:1.18.22'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    compileOnly 'org.projectlombok:lombok'
//  developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.integration:spring-integration-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'

}

dependencyManagement {
    imports {
        mavenBom "io.sentry:sentry-bom:${sentryVersion}"
    }
}
jacoco {
    toolVersion = "0.8.10"
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}
jacocoTestReport {
    dependsOn test  // Генерация отчета после выполнения тестов
    reports {
        xml.required = true
        html.required = true  // Генерация HTML отчета для удобного просмотра в браузере
    }
}

jacocoTestCoverageVerification {
    dependsOn test  // Сначала запускаем тесты
    violationRules {
        rule {
            limit {
                minimum = 0.10  // Требуется минимум 80% покрытия кода
            }
        }
    }
}

tasks.check.dependsOn jacocoTestCoverageVerification
